# -*- coding: utf-8 -*-
"""Activity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14PDtPnDdFhonHoVL18t7RHohbKlWTig9
"""

import pandas as pd
import numpy as np

bank = pd.read_excel('Bank_Personal_Loan_Modelling.xlsx')

bank.shape

bank.head()

bank.columns

bank.isnull().sum()

bank.value_counts('Personal Loan')

bank.info()

bank.nunique()

cat_var = [col for col in bank.columns if bank[col].nunique()<=5]
print(cat_var)
num_var = [col for col in bank.columns if bank[col].nunique()>5]
print(num_var)

bank.dtypes

cat_attr = (['Family', 'Education', 'Personal Loan', 'Securities Account', 'CD Account', 'Online', 'CreditCard'])
for col in cat_attr:
  bank[col] = bank[col].astype('category')

bank.dtypes

bank.drop(['ID','ZIP Code'],axis=1,inplace=True)

bank.dtypes

from sklearn.model_selection import train_test_split
y =bank['Personal Loan']
X=bank.drop(['Personal Loan'],axis=1)
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import f1_score,accuracy_score

lr =LogisticRegression()
lr.fit(X_train,y_train)

train_pred = lr.predict(X_train)

test_pred =lr.predict(X_test)

print(accuracy_score(y_train,train_pred))
print(accuracy_score(y_test,test_pred))

from sklearn.metrics import f1_score,confusion_matrix,classification_report

print(classification_report(y_test,test_pred))
print(confusion_matrix(y_test,test_pred))

print(classification_report(y_test,test_pred))
print(confusion_matrix(y_test,test_pred))

print(f1_score(y_test,test_pred))
print(f1_score(y_train,train_pred))

from sklearn import tree

from sklearn.tree import DecisionTreeClassifier

dtclf = DecisionTreeClassifier()
dtclf.fit(X_train,y_train)

dtclf.fit(X_train, y_train)

train_pred = dtclf.predict(X_train)

test_pred =dtclf.predict(X_test)

print(f1_score(y_train,train_pred))

print(f1_score(y_test,test_pred))

print(accuracy_score(y_train,train_pred))
print(accuracy_score(y_test,test_pred))

from sklearn.neighbors import KNeighborsClassifier

knn=KNeighborsClassifier()

knn.fit(X_train,y_train)

train_pred=knn.predict(X_train)
print("train f1 score",f1_score(y_train,train_pred))

test_pred=knn.predict(X_test)
print("test f1 score",f1_score(y_test,test_pred))

print(accuracy_score(y_train,train_pred))
print(accuracy_score(y_test,test_pred))

import pickle 
pickle.dump(lr,open('model.pkl','wb'))
model =pickle.load(open('model.pkl','rb'))